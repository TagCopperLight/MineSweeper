\begin{MintedVerbatim}[commandchars=\\\{\}]
        Fonction is\PYGZus{}valid en booléen
        Parametres :
            pos en entier
            a en action
            level en levelinfo
            air\PYGZus{}level en levelinfo
        Declarations :
            x en entier
            y en entier
            map en tableau de caractères
            air\PYGZus{}map en tableau de caractères
            not\PYGZus{}in\PYGZus{}air en booléen
        Debut
            x \PYGZlt{}\PYGZhy{} pos \PYGZpc{} level.xsize // On récupère la coordonnée x de la case
            y \PYGZlt{}\PYGZhy{} pos / level.xsize // On récupère la coordonnée y de la case
            map \PYGZlt{}\PYGZhy{} level.map // On récupère la carte du niveau
            air\PYGZus{}map \PYGZlt{}\PYGZhy{} air\PYGZus{}level.map // On récupère la carte du niveau sans les ennemis

            // Variable indiquant si le joueur n\PYGZsq{}est pas en l\PYGZsq{}air
            not\PYGZus{}in\PYGZus{}air \PYGZlt{}\PYGZhy{} (air\PYGZus{}map[y + 1][x] != PATH \PYGZam{}\PYGZam{} air\PYGZus{}map[y + 1][x] != CABLE \PYGZam{}\PYGZam{} air\PYGZus{}map[y + 1][x] != BOMB) || air\PYGZus{}map[y \PYGZhy{} 1][x] == CABLE
            // Si la case en dessous du joueur n\PYGZsq{}est pas un chemin, un cable ou une bombe, ou si la case au dessus du joueur est un cable, alors le joueur n\PYGZsq{}est pas en l\PYGZsq{}air

            Selon a faire
                Cas NONE :
                    Retourner VRAI
                Cas UP :
                    // On ne peut monter que si on est sur une echelle et qu\PYGZsq{}il n\PYGZsq{}y a pas de mur au dessus
                    Si map[y][x] == LADDER et map[y \PYGZhy{} 1][x] != WALL et map[y \PYGZhy{} 1][x] != FLOOR et map[y \PYGZhy{} 1][x] != ENEMY alors
                        Retourner VRAI
                Cas DOWN :
                    // On ne peut descendre que si il y a une echelle, un chemin ou un cable en dessous
                    // On laisse la possibilite de descendre si le joueur est en l\PYGZsq{}air
                    Si (map[y + 1][x] == LADDER ou map[y + 1][x] == PATH ou map[y + 1][x] == CABLE) et map[y + 1][x] != ENEMY alors
                        Retourner VRAI
                Cas LEFT :
                    // On ne peut aller a gauche que si il n\PYGZsq{}y a pas de mur a gauche et que le joueur n\PYGZsq{}est pas en l\PYGZsq{}air
                    // C\PYGZsq{}est un petit hack car le moteur avance de plusieurs tour de jeu sans utiliser le code du joueur tant qu\PYGZsq{}il tombe, mais le A* ne le sait pas,
                    // alors on se debrouille pour que la seule action possible soit DOWN
                    Si map[y][x \PYGZhy{} 1] != WALL et map[y][x \PYGZhy{} 1] != FLOOR et map[y][x \PYGZhy{} 1] != ENEMY et map[y][x \PYGZhy{} 1] != DEAD et map[y + 1][x \PYGZhy{} 1] != ENEMY et not\PYGZus{}in\PYGZus{}air alors
                        Retourner VRAI
                Cas RIGHT :
                    // De meme pour la droite
                    Si map[y][x + 1] != WALL et map[y][x + 1] != FLOOR et map[y][x + 1] != ENEMY et map[y][x + 1] != DEAD et map[y + 1][x + 1] != ENEMY et not\PYGZus{}in\PYGZus{}air alors
                        Retourner VRAI
                Defaut :
                    Afficher \PYGZdq{}ERROR: Invalid action\PYGZdq{}
                    Sortir du programme
            Fin Selon

            Retourner FAUX
        Fin
\end{MintedVerbatim}
